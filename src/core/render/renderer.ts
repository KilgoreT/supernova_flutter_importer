import { IToken } from "src/core/entity/core";

import * as Handlebars from 'handlebars';

export interface IRenderer {
    openClass(className: string, level: number): string;
    closeClass(level: number): string;
    renderFieldReference(fieldName: string, className: string, isStatic: boolean, level: number): string;
    renderToken(
        token: IToken,
        keywords: Set<string>,
        customIdentifiers: string[],
        isStatic: boolean,
        level: number,
    ): string;
}


const getFs = () => eval('require')('fs');
const getPath = () => eval('require')('path');

// –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —à–∞–±–ª–æ–Ω–∞–º
const getTemplatesDir = (): string => {
    const path = getPath();
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
    const possiblePaths = [
        path.join(process.cwd(), 'src/templates/dart'),
        path.join(__dirname || '', '../../templates/dart'),
        path.join(process.cwd(), 'dist/templates/dart'),
        path.join(process.cwd(), 'templates/dart')
    ];
    
    for (const templatePath of possiblePaths) {
        if (getFs().existsSync(templatePath)) {
            return templatePath;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return path.join(process.cwd(), 'src/templates/dart');
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function renderTemplate(templateName: string, context: any): string {
    const path = getPath();
    const fs = getFs();

    const templatesDir = getTemplatesDir();
    
    // –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log(`üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞: ${templateName}.hbs`);
    console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–æ–≤: ${templatesDir}`);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    const partials = ['dart_color_field'];
    partials.forEach(partialName => {
        const partialPath = path.join(templatesDir, `${partialName}.hbs`);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ partial: ${partialPath}`);
        if (fs.existsSync(partialPath)) {
            console.log(`‚úÖ Partial –Ω–∞–π–¥–µ–Ω: ${partialName}`);
            const partialContent = fs.readFileSync(partialPath, 'utf-8');
            Handlebars.registerPartial(partialName, partialContent);
        } else {
            console.log(`‚ùå Partial –Ω–µ –Ω–∞–π–¥–µ–Ω: ${partialName}`);
        }
    });

    const templatePath = path.join(templatesDir, `${templateName}.hbs`);
    console.log(`üîç –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: ${templatePath}`);
    
    if (!fs.existsSync(templatePath)) {
        console.log(`‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${templatePath}`);
        console.log(`üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${templatesDir}:`);
        try {
            const files = fs.readdirSync(templatesDir);
            files.forEach(file => console.log(`  - ${file}`));
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error}`);
        }
        throw new Error(`Template not found: ${templatePath}`);
    }
    
    console.log(`‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω: ${templateName}`);
    const templateContent = fs.readFileSync(templatePath, 'utf-8');
    const template = Handlebars.compile(templateContent);
    return template(context);
}