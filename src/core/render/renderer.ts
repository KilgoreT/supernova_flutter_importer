import { IToken } from "src/core/entity/core";

import * as Handlebars from 'handlebars';

export interface IRenderer {
    openClass(className: string, level: number): string;
    closeClass(level: number): string;
    renderFieldReference(fieldName: string, className: string, isStatic: boolean, level: number): string;
    renderToken(
        token: IToken,
        keywords: Set<string>,
        customIdentifiers: string[],
        isStatic: boolean,
        level: number,
    ): string;
}


const getFs = () => eval('require')('fs');
const getPath = () => eval('require')('path');

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —à–∞–±–ª–æ–Ω–∞–º
const getTemplatesDir = (): string => {
    const path = getPath();
    const fs = getFs();
    
    console.log('üîç –ü–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤...');
    console.log('üìÇ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());
    
    // –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫
    const possiblePaths = [
        // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        path.join(process.cwd(), 'dist/templates/dart'),
        path.join(process.cwd(), 'src/templates/dart'),
        // Supernova –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        '/var/task/dist/templates/dart',
        '/var/task/templates/dart',
        '/var/task/src/templates/dart',
    ];
    
    for (const templatePath of possiblePaths) {
        console.log(`  –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${templatePath}`);
        if (fs.existsSync(templatePath)) {
            console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–∞: ${templatePath}`);
            return templatePath;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∂–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    console.log('‚ùå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
    try {
        const items = fs.readdirSync(process.cwd());
        items.forEach(item => {
            const fullPath = path.join(process.cwd(), item);
            const stat = fs.statSync(fullPath);
            console.log(`  ${stat.isDirectory() ? 'üìÅ' : 'üìÑ'} ${item}`);
        });
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}`);
    }
    
    throw new Error('Templates directory not found');
};

export function renderTemplate(templateName: string, context: Record<string, unknown>): string {
    const path = getPath();
    const fs = getFs();

    const templatesDir = getTemplatesDir();
    
    // –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log(`üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞: ${templateName}.hbs`);
    console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–æ–≤: ${templatesDir}`);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    const partials = ['dart_color_field'];
    partials.forEach(partialName => {
        const partialPath = path.join(templatesDir, `${partialName}.hbs`);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ partial: ${partialPath}`);
        if (fs.existsSync(partialPath)) {
            console.log(`‚úÖ Partial –Ω–∞–π–¥–µ–Ω: ${partialName}`);
            const partialContent = fs.readFileSync(partialPath, 'utf-8');
            Handlebars.registerPartial(partialName, partialContent);
        } else {
            console.log(`‚ùå Partial –Ω–µ –Ω–∞–π–¥–µ–Ω: ${partialName}`);
        }
    });

    const templatePath = path.join(templatesDir, `${templateName}.hbs`);
    console.log(`üîç –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: ${templatePath}`);
    
    let templateContent: string;
    
    if (fs.existsSync(templatePath)) {
        console.log(`‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω: ${templateName}`);
        templateContent = fs.readFileSync(templatePath, 'utf-8');
    } else {
        console.log(`‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${templatePath}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π`);
        console.log(`üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${templatesDir}:`);
        try {
            const files = fs.readdirSync(templatesDir);
            files.forEach(file => console.log(`  - ${file}`));
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error}`);
        }
        
        throw new Error(`Template not found: ${templatePath}`);
    }
    
    const template = Handlebars.compile(templateContent);
    return template(context);
}